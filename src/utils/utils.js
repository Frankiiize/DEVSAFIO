export const getErrorsFromValidationError = (validationError) => {
  const FIRST_ERROR = 0;
  return validationError.inner.reduce((errors, error) => {
      return {
          ...errors,
          [error.path]: error.errors[FIRST_ERROR] ,
      };
  }, {});
};

export const validate = (getValidationSchema) => {
  return (values) => {
      const validationSchema = getValidationSchema(values);
      try {
          validationSchema.validateSync(values, { abortEarly: false });
          return {};
      } catch (error) {
          return getErrorsFromValidationError(error);
      }
  };
};

const multipleCheckValues = ( target,initialValues, dataset)=> {
  if(dataset === 'multipleCheck'){
    const objectKeys = initialValues[dataset].includes(parseInt(target.value))
    if(!objectKeys) {
       initialValues[dataset].push( parseInt(target.value));
       return { [target.name]: target.checked }
    } else {
      const index =  initialValues[dataset].findIndex(e => e === parseInt(target.value));
      initialValues[dataset].splice(index, 1)
      return { [target.name]: target.checked }
    }
  } 
}

export const autoGeneratedFormValues = (formik, id , {target}, state, stateName)  => {
    const findObj = state.find((e) => e.id === id);
    // const findIndex = findObj.formValues.findIndex((e) => e[target.name])
    const isTargetExists = Object.keys(findObj.formValues).some((e) =>{
      return e === target.name
    }) 
    //si no existe el value
    if(!isTargetExists){
      findObj.formValues = {...findObj.formValues, [target.name] : target.value}
      formik.setValues({...formik.values , [stateName]: [findObj]})
    }else{
      findObj.formValues = {...findObj.formValues, [target.name] : target.value}
      formik.setValues({...formik.values , ...[stateName] = [findObj]})
      
    }
}


export const getInputValue = (target, formik, id) => {
  const initialValues = formik.initialValues;
  const dataset = target.getAttribute('dataset');

    if (target.type === 'checkbox') {
      if(!!dataset){
        multipleCheckValues(target, initialValues, dataset );
      }
      return { [target.name]: target.checked }
    }
    if (target.type === 'radio') {
      return { [target.name]: parseInt(target.value)}
    }
    if (target.type === 'file') return { [target.name]: target.files[0] }

    else {
      return { [target.name]: target.value }
    }
}

// CREATORS
export const handlerInputChangeCreator = (formik ,id) => ({ target}) => {  formik.setValues({ ...formik.values, ...getInputValue(target, formik , id) })}
;

//PARSED FUNCTIONS (need parse the values of auto generated forms when its send to backend)
export const parsedAutoFormValues = (values) => {
  const parsedValues = values.generatedForm.map((item,index) =>  {
     return { 
       institution: item[`generatedForm-${index}`].institution,
       educacion: item[`generatedForm-${index}`].educacion,
       certificado: item[`generatedForm-${index}`].certificado,
       area: item[`generatedForm-${index}`].area,
       anoGraduacion: item[`generatedForm-${index}`].anoGraduacion
     }
   }, {})
   return parsedValues
 }
