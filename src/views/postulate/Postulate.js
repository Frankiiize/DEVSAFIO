import { useFormik } from "formik";
import React, { useState, useEffect, useRef } from "react";
import { jopProfileShema as schema, postulateSchema as schema2, postulateSchema2 as schema3 } from "../../components/schemas/schema";
import { validate, handlerInputChangeCreator, parsedAutoFormValues, autoGeneratedFormValues } from "../../utils/utils";
import { ButtonComponent } from "../../components/common/ButtonComponent";
import { FormsCardContainer } from "../../layout/FormsCardContainer";
import { SpinnerLoader } from "../../components/loaders/SpinnerLoader";
//inputsConfig
import { stepOneInputs, stepTwoinputs, stepThreeInputs, stepFourInputs, educationInputs, languageInputs, dbLibsFrameworkInputs, toolsInput, programingExperienceInputs, desingExperienceInputs, machineDataScienceInputs } from "./data/inputsConfig";
import { FormGrupLayout } from "./forms/FormGrupLayout";
import { AutoFormGeneratedLayout } from "./forms/AutoFormGeneratedLayout";
import { workProfile } from "../../services/users";
import { responseOnValidate } from "../../utils/alerts";
import { useNavigate } from "react-router-dom";
import { StepCounter } from "../../components/stepCounter/StepCounter";
import { FaWindowClose } from 'react-icons/fa'

const initialFormValues =  (formStateName) => {
  switch(formStateName) {
    case 'generatedForm':
      return {  institucion : '', educacion : '', area : '', certificado : '',anoGraduacion : ''};
      break;
    case 'generatedFormLanguages':
      return {programingLanguajes:undefined, level:undefined};
      break;
    case 'generatedFormDbLibsFrameworks':
      return {dbLibsFrameworks: undefined, level: undefined}
      break;
    case 'generatedFormTools':
      return {tools: undefined, level: undefined};
      break;
    default:
     return []
  }
}

const JobProfile = () => {
  const navigate = useNavigate();
  const [formSteps, setFormSteps] = useState({step: 1 , totalSteps: 4});
  const [ formLoading, setFormLoading ] = useState(false);
  // const [ languageFiels, setLanguageFields ] = useState([languageInputs]);
  // const [ dbLibsFrameworkFields, setDbLibsFrameworkFields ] = useState([dbLibsFrameworkInputs]);
  // const [ toolsFields, setToolFields ] = useState([toolsInput]);
  const [ workingExperience, setWorkingExperience ] = useState([]);

  

  const onStepSubmit = () => {

      setFormSteps({...formSteps, step: formSteps.step + 1})
      window.scrollTo({
        top:0,
        behavior: 'smooth'
      })
  };

  const onSubmit = () =>{
    setFormLoading(true);
    const data = {
      gender: formikStepOne.values.gender,
      phone_number: formikStepOne.values.number,
      city: formikStepOne.values.city,
      country: formikStepOne.values.country,
      //roles: formikStepOne.values.multipleCheck,

      education_status: formikStepTwo.actualEducationSituation,
      educational_level: formikStepTwo.values.maxEducationLevel,
      english_level: formikStepTwo.values.englishLevel,
      educational_experience: formikStepTwo.values.generatedForm.map(e => e.formValues),
      databases: formikStepTwo.values.generatedFormDbLibsFrameworks.map(e => e.formValues),
      dev_languages: formikStepTwo.values.generatedFormLanguages.map(e => e.formValues),
      dev_tools: formikStepTwo.values.generatedFormTools.map(e => e.formValues),
      

      other_technologies_comment: formikStepTwo.values.otherTec,

      cv_url: formikStepThree.values.cvUrl,
      linkedin_url: formikStepThree.values.urlLinkedin,
      github_url: formikStepThree.values.github_url,
      featured_project: formikStepThree.values.projectDescription,
      dev_experience: formikStepThree.values.experienceDev,
      design_experience: formikStepThree.values.desingExperience,
      data_experience: formikStepThree.values.experienceData,
     

      work_availability: formikStepFour.values.workavailability,
      visa: formikStepFour.values.visa,
      ideal_work_comment: formikStepFour.values.idealWork,
      relocation_option: formikStepFour.values.actualSituation,
      visa: formikStepFour.values.visa,
      soft_skills: [
        {
            "softSkill_id": 3
        },
        {
            "softSkill_id": 4
        }
    ]
    }
    workProfile({
      work_profile: data
    }).then((res) => {
      responseOnValidate(res, () => {
        setFormLoading(false);
      }).then(() => {
        navigate('/dashboard', {replace: true})
      }).catch(err => {
        console.log(err)
        setFormLoading(false);
      })
    }).catch(err => {
      console.log(err);
      setFormLoading(false)
    })

  }


  const formikStepOne = useFormik({
    initialValues: {
      number: "",
      city: "",
      country: "",
      gender: "",

      DevFrontEnd: false,
      DevBackend: false,
      DevFullStackBackend: false,
      AnalystQA: false,
      DataAnalist: false,
      DevMobile: false,

      DesignerUXUI: false,
      DesignerUI: false,

      DataScientist: false,
      EnginerData: false,


      ProductManager: false,
      DevOps: false,
      Other: false,
      multipleCheck: []
    },
    onSubmit: onStepSubmit,
    validate: validate(schema),
  });


  const formikStepTwo = useFormik({
    initialValues: {
      maxEducationLevel: "",
      actualEducationSituation: '',
      englishLevel:'',
      otherTec:'',
      generatedForm :[{id:1, inputs: educationInputs, formValues: initialFormValues('generatedForm')}],
      generatedFormLanguages:[{id:1, inputs: languageInputs , formValues: initialFormValues('generatedFormLanguages')}],
      generatedFormDbLibsFrameworks: [{id:1, inputs: dbLibsFrameworkInputs , formValues: initialFormValues('generatedFormDbLibsFrameworks')}],
      generatedFormTools: [{id:1, inputs: toolsInput , formValues: initialFormValues('generatedFormTools')}]
    },
    validate: validate(schema2),
    onSubmit: onStepSubmit
  });

  const formikStepThree = useFormik({
    initialValues: {
      cvUrl: "",
      urlLinkedin : "",
      urlPortafolio:"",
      projectDescription: "",
      experienceUI:undefined,
      experienceDev:undefined,
      experienceData:undefined,

      responsabity:false,
      leader:false,
      flexible: false,
      innovative:false,
      analytical:false,
      sociable:false,
      problemResolution:false,
      productivity:false,
      multitask:false,
      empathy:false,
      negotiation:false,
      resultsOriented:false,
      resilient:false,

    },
    validate: validate(schema3),
    onSubmit: onStepSubmit
  });
  const formikStepFour = useFormik({
    initialValues: {
      workavailability:'',
      idealWork:'',
      actualSituation:'',
      visa:''
    },
    //validate: validate(schema3),
    onSubmit: onSubmit
  });
  const handleTxtChange = handlerInputChangeCreator(formikStepOne);
  const handleTxtChange2 = handlerInputChangeCreator(formikStepTwo);
  const handleTxtChange3 = handlerInputChangeCreator(formikStepThree);
  const handleTxtChange4 = handlerInputChangeCreator(formikStepFour);


  const deleteAutoGenLayout = (id, formik, formState, formStateName) => {
    const filter =  formState.filter(item => item.id !== id);
    formik.setValues({...formik.values, [formStateName]: filter})
  }
 
  
  const handleAddForm = (formikObj, formik, input, formStateName) => {
    const formState = formikObj
    const newInput = formikObj
   
    if(formState.length > 0){
      const existId = formState.some((e) => {
        const elementKey = Object.keys(e)
       return elementKey.includes('id')
      })
      if(existId){
        const getMaxId = (formState) => {
          const initialValue = 0
          const sumWithInitial = formState.reduce((previousValue, currentValue) => previousValue > currentValue ?  previousValue :  currentValue,
            initialValue
          );
          return sumWithInitial
        }
        const id = getMaxId(formState).id + 1
        newInput.push({id: id, inputs: input, formValues: initialFormValues(formStateName)})
        formik.setValues({...formik.values, [formStateName]: newInput})
      }
      
    }else {
      const findDefaultInput = () => {
        switch(formStateName) {
          case 'generatedForm':
            return educationInputs;
            break;
          case 'generatedFormLanguages':
            return languageInputs
            break;
          case 'generatedFormDbLibsFrameworks':
            return dbLibsFrameworkInputs
            break;
          case 'generatedFormTools':
            return toolsInput
            break;
          default:
           return []
        }
      }
      formik.setValues({...formik.values, [formStateName]:[{id:1, inputs: findDefaultInput(), formValues: initialFormValues(formStateName)}]},)
    }
    
  }


  useEffect(() => {
    const getWorkingExperience = () => {
      const { DevBackend, DevFrontEnd , DevFullStackBackend, AnalystQA, DataAnalist ,DevMobile } = formikStepOne.values;
      const { DesignerUI, DesignerUXUI } = formikStepOne.values;
      const { DataScientist, EnginerData } = formikStepOne.values;
      const inputs = []
      const isProgramingExp = [DevBackend,DevFrontEnd,DevFullStackBackend,AnalystQA,DataAnalist,DevMobile]
      const isDesingExp = [ DesignerUI, DesignerUXUI ];
      const isMachineScienceExp = [ DataScientist, EnginerData ];

      const programingExperience = (isProgramingExp.some((e) => e === true)) ? (programingExperienceInputs) : (workingExperience.filter((item) => item.id !== 'experienceDev'))
      const desingExperience =( isDesingExp.some((e) => e === true )) ? (desingExperienceInputs) : (workingExperience.filter((item) => item.id !== 'experienceUI'))
      const machineScienceExperience =  ( isMachineScienceExp.some((e) => e === true )) ? (machineDataScienceInputs) : (workingExperience.filter((item) => item.id !== 'experienceUI'))
      if(isProgramingExp.some((e) => e === true))  inputs.push(programingExperience)
      if(isDesingExp.some((e) => e === true)) inputs.push(desingExperience)
      if(isMachineScienceExp.some((e) => e === true))  inputs.push(machineScienceExperience)

      setWorkingExperience(inputs.flat())

    }
    getWorkingExperience()
  },[formikStepOne.values.multipleCheck.length])


  return (
      <div className="bg-primary  items-center containerWithHeader-min-height flex flex-col ">
        <section className="w-full flex grow">
        {
          !formLoading
          ? (
              <div className="container mb-10  mx-auto mt-4">
                <FormsCardContainer>
                  {formSteps.step === 1 && (
                    <div className="px-5">
                      <h1 className="text-3xl ">Únete a Devsafío</h1>
                      <h4 className="text-m  pb-5"> Formulario de Inscripción</h4>

                      <p className="mt-5">
                        Devsafio es una iniciativa que une talento junior
                        lationamericano(trainee y bootcamp) junto a mentores para
                        potenciar su empleabilidad inicial e impactar la industria
                        tecnológica.
                      </p>
                      <p className="mt-2 ">
                        Si estás
                        <span className="font-bold">
                          {" "}
                          buscando empleo Junior o Trainee (Programación, Diseño
                          UX/UI y Data Science)
                        </span>{" "}
                        te dejamos este formulario para que seas parte de distintas
                        ofertas laborales que tenemos junto a importantes empresas
                        en latinoamerica.
                      </p>
                      <p className="mt-2 ">
                        Recuerda que todos los{" "}
                        <span className="font-bold">
                          {" "}
                          talentos juniors contratados son apoyados y guiados por un
                          mentor senior durante 3 meses{" "}
                        </span>
                        (ofertas remuneradas).
                      </p>
                      <p className="mt-2 ">
                        {" "}
                        Nos puedes seguir en:{" "}
                        <a
                          className="text-blue-600"
                          href={"https://www.linkedin.com/company/devsafio"}
                          target="_blank"
                          rel="noreferrer"
                        >
                          Linkedin
                        </a>
                      </p>

                      <p className="pt-4 ">¡Vamos con todo!</p>
                    </div>
                  )}
                    <StepCounter
                      formSteps={formSteps}
                    />
                  <form className="p-1">
                    <div className="p-4 ">
                      {
                        formSteps.step === 1 && (
                          <>
                          <h1 className="text-2xl  pt-4"> Información Personal</h1>
                            <FormGrupLayout
                              inputs={stepOneInputs}
                              stateFormik={formikStepOne}
                              onChange={handleTxtChange}
                            />
                          </>
                        )
                      }
                      {
                      formSteps.step === 2 && (
                        <>
                        <FormGrupLayout
                          inputs={stepTwoinputs}
                          stateFormik={formikStepTwo}
                          onChange={handleTxtChange2}
                          slice={{start: 0 , end: 1}}
                        />
                        <div className="Education-Form my-5"> 
                          <h2 className="text-xl my-3 ">¿Dónde estudiaste? </h2>
                          <div className={!!formikStepTwo.errors["generatedForm"] ? "min-h-[3rem] my-5 border-2 rounded-md border-error flex justify-center items-center" : "min-h-[3rem]"}>
                            {
                              !!formikStepTwo.errors["generatedForm"] && (
                                  <span className="text-error">{formikStepTwo.errors["generatedForm"]}</span>
                              )
                            }
                            {
                              formikStepTwo.values.generatedForm.length > 0 &&
                              formikStepTwo.values.generatedForm.map((item, indexPrincipal) => (
                                <div id={`Input-container-${indexPrincipal}`} key={`Input-container-${indexPrincipal}`} data-id={item.id} className={" w-full drop-shadow-md rounded-md p-5 bg-slate-100 mb-5" } >
                                  <div className="my-2">
                                    <ButtonComponent
                                      style={null}
                                      label={null}
                                      type="button" onClick={(ev) =>deleteAutoGenLayout(item.id, formikStepTwo, formikStepTwo.values.generatedForm, 'generatedForm' )}>
                                      <FaWindowClose
                                        className="hover:text-red-500"
                                        size={24}
                                        />
                                    </ButtonComponent>
                                  </div>
                                  <AutoFormGeneratedLayout
                                    id={item.id}
                                    inputs={item.inputs}
                                    stateFormik={formikStepTwo}
                                    indexPrincipal={indexPrincipal}
                                    onChange={(ev) => autoGeneratedFormValues(formikStepTwo, item.id, ev, formikStepTwo.values.generatedForm, 'generatedForm' )}
                                  />
                                  
                                </div>
                              ))
                            }
                          </div>
                          <ButtonComponent
                            style={"primary-small"}
                            type={"button"}
                            label={"añadir"}
                            onClick={() => handleAddForm(formikStepTwo.values.generatedForm, formikStepTwo, educationInputs, 'generatedForm')}
                          />
                        </div>

                        <div className="mt-5">
                          <FormGrupLayout
                            inputs={stepTwoinputs}
                            stateFormik={formikStepTwo}
                            onChange={handleTxtChange2}
                            slice={{start: 1, end: 3}}
                          />
                        </div>

                        <div className="text-justify">
                          <h3 className="text-xl mt-5 mb-2">Queremos conocer tus competencias y experiencia. Para cada herramienta queremos que agregues el nivel que sientes que tienes según esta nomenclatura:</h3>
                          <ul>
                            <li><strong>Nivel 1</strong>: No tengo experiencia laboral, solo nociones teóricas básicas</li>
                            <li><strong>Nivel 2 </strong>: No tengo experiencia laboral, pero he desarrollado proyectos utilizando esta tecnología/herramienta. </li>
                            <li><strong>Nivel 3 </strong>: Tengo poca experiencia laboral, menos de un año, necesito supervisión constante. </li>
                            <li><strong>Nivel 4 </strong>: Tengo experiencia laboral (+1 año) y/o autonomía completa a la hora de desarrollar proyectos. </li>
                            <li><strong>Nivel 5</strong>: Tengo mucha experiencia laboral y he liderado proyectos en esta tecnología.</li>
                          </ul>
                          <p className="pt-3">Si crees que estas herramientas no sirven para el cargo que estás buscando, no te preocupes, puedes dejarlo en blanco.</p>
                        </div>
                        <div className="Languajes-Form my-5">
                          <h2 className="text-xl my-3 ">¿Qué lenguajes manejas?</h2>
                          <div className={!!formikStepTwo.errors["generatedFormLanguages"] ? "min-h-[3rem] my-5 border-2 rounded-md border-error flex justify-center items-center" : "min-h-[3rem]"}>
                            {
                              !!formikStepTwo.errors["generatedFormLanguages"] && (
                                  <span className="text-error">{formikStepTwo.errors["generatedFormLanguages"]}</span>
                              )
                            }
                            {
                              formikStepTwo.values.generatedFormLanguages.length > 0 &&
                              formikStepTwo.values.generatedFormLanguages.map((item, indexPrincipal) => (
                                <div key={`Input-container-${indexPrincipal}`} className={" w-full drop-shadow-sm rounded-md p-5 bg-slate-100 my-5"} >
                                    <ButtonComponent
                                    style={null}
                                    label={null}
                                    type="button" onClick={(ev) =>deleteAutoGenLayout(item.id, formikStepTwo, formikStepTwo.values.generatedFormLanguages, 'generatedFormLanguages')}>
                                    <FaWindowClose
                                      className="hover:text-red-500"
                                      size={24}
                                      />
                                  </ButtonComponent>
                                  <AutoFormGeneratedLayout
                                    inputs={item.inputs}
                                    stateFormik={formikStepTwo}
                                    indexPrincipal={indexPrincipal}
                                    onChange={(ev) => autoGeneratedFormValues(formikStepTwo, item.id, ev, formikStepTwo.values.generatedFormLanguages )}
                                  />
                                </div>
                              ))
                            }
                          </div>
                            <ButtonComponent
                              style={"primary-small"}
                              type={"button"}
                              label={"añadir"}
                              onClick={() => handleAddForm(formikStepTwo.values.generatedFormLanguages, formikStepTwo, languageInputs, 'generatedFormLanguages')}
                            />

                        </div>
                        <div className="DbLibsFrameWorks-Form my-5">
                          <h2 className="text-xl my-3 ">¿Bases de Datos, Librerías y Frameworks ?</h2>
                          <div className={!!formikStepTwo.errors["generatedFormDbLibsFrameworks"] ? "min-h-[3rem] my-5 border-2 rounded-md border-error flex justify-center items-center" : "min-h-[3rem]"}>
                          {
                              !!formikStepTwo.errors["generatedFormDbLibsFrameworks"] && (
                                  <span className="text-error">{formikStepTwo.errors["generatedFormDbLibsFrameworks"]}</span>
                              )
                            }
                            {
                              formikStepTwo.values.generatedFormDbLibsFrameworks.length > 0 &&
                              formikStepTwo.values.generatedFormDbLibsFrameworks.map((item, indexPrincipal) => (
                                <div key={`Input-container-${indexPrincipal}`} className={"w-full drop-shadow-sm rounded-md p-5 bg-slate-100 my-5" } >
                                  <ButtonComponent
                                    style={null}
                                    label={null}
                                    type="button" onClick={(ev) =>deleteAutoGenLayout(item.id, formikStepTwo, formikStepTwo.values.generatedFormDbLibsFrameworks, 'generatedFormDbLibsFrameworks')}>
                                    <FaWindowClose
                                      className="hover:text-red-500"
                                      size={24}
                                      />
                                  </ButtonComponent>
                                  <AutoFormGeneratedLayout
                                    inputs={item.inputs}
                                    stateFormik={formikStepTwo}
                                    indexPrincipal={indexPrincipal}
                                    onChange={(ev) => autoGeneratedFormValues(formikStepTwo, item.id, ev, formikStepTwo.values.generatedFormDbLibsFrameworks )}
                                  />
                                </div>
                              ))
                            }
                          </div>
                          <ButtonComponent
                            style={"primary-small"}
                            type={"button"}
                            label={"añadir"}
                            onClick={() => handleAddForm(formikStepTwo.values.generatedFormDbLibsFrameworks, formikStepTwo, dbLibsFrameworkInputs, 'generatedFormDbLibsFrameworks')}
                          />

                        </div>
                        <div className="Tools-Form my-5">
                          <h2 className="text-xl my-3 ">¿Otras herramientas?</h2>
                          <div className={!!formikStepTwo.errors["generatedFormTools"] ? "min-h-[3rem] my-5 border-2 rounded-md border-error flex justify-center items-center" : "min-h-[3rem]"}>
                            {
                              !!formikStepTwo.errors["generatedFormTools"] && (
                                  <span className="text-error">{formikStepTwo.errors["generatedFormTools"]}</span>
                              )
                            }
                            {
                              formikStepTwo.values.generatedFormTools.length > 0 &&
                              formikStepTwo.values.generatedFormTools.map((item, indexPrincipal) => (
                                <div key={`Input-container-${indexPrincipal}`} className={"w-full drop-shadow-sm rounded-md p-5 bg-slate-100 my-5" } >
                                  <ButtonComponent
                                    style={null}
                                    label={null}
                                    type="button" onClick={(ev) =>deleteAutoGenLayout(item.id, formikStepTwo, formikStepTwo.values.generatedFormTools, 'generatedFormTools')}>
                                    <FaWindowClose
                                      className="hover:text-red-500"
                                      size={24}
                                      />
                                  </ButtonComponent>
                                  <AutoFormGeneratedLayout
                                    inputs={item.inputs}
                                    stateFormik={formikStepTwo}
                                    indexPrincipal={indexPrincipal}
                                    onChange={(ev) => autoGeneratedFormValues(formikStepTwo, item.id, ev, formikStepTwo.values.generatedFormTools )}
                                  />
                                </div>
                              ))
                            }
                          </div>
                           <ButtonComponent
                            style={"primary-small"}
                            type={"button"}
                            label={"añadir"}
                            onClick={() => handleAddForm(formikStepTwo.values.generatedFormTools, formikStepTwo, toolsInput, 'generatedFormTools')}
                          />

                        </div>
                        <FormGrupLayout
                          inputs={stepTwoinputs}
                          stateFormik={formikStepTwo}
                          onChange={handleTxtChange2}
                          slice={{start: 3}}
                        />
                        </>
                      )
                      }
                      {
                        formSteps.step === 3 && (
                          <>
                          <FormGrupLayout
                            inputs={stepThreeInputs}
                            stateFormik={formikStepThree}
                            onChange={handleTxtChange3}
                          />
                          {

                              <FormGrupLayout
                                inputs={workingExperience}
                                stateFormik={formikStepThree}
                                onChange={handleTxtChange3}
                                />
                          }
                          </>
                        )
                      }
                      {
                        formSteps.step === 4 && (
                          <FormGrupLayout
                              inputs={stepFourInputs}
                              stateFormik={formikStepFour}
                              onChange={handleTxtChange4}
                            />
                        )
                      }
                    </div>
                    <div className="flex flex-col md:flex-row md:gap-3 ">
                      <div className={formSteps.step === 1 ? 'hidden' :"my-3 md:w-1/2"}>
                          {
                            formSteps.step > 1
                            &&
                            <ButtonComponent
                              style={"secondary"}
                              type={"button"}
                              label={"atras"}
                              onClick={() => {
                                formSteps.step > 1
                                && setFormSteps({...formSteps, step: formSteps.step - 1})
                              }}
                            ></ButtonComponent>
                          }

                      </div>
                      <div className={formSteps.step === 1 ? 'my-3 w-full' :"my-3 md:w-1/2"}>
                        <ButtonComponent
                          style={"primary"}
                          type={"button"}
                          label={"siguiente"}
                          onClick={() => {
                            formSteps.step === 1
                              ? formikStepOne.handleSubmit()
                              : formSteps.step === 2
                              ? formikStepTwo.handleSubmit()
                              : formSteps.step === 3
                              ? formikStepThree.handleSubmit()
                              : formikStepFour.handleSubmit()
                          }}
                        ></ButtonComponent>
                      </div>
                    </div>
                  </form>
                </FormsCardContainer>
              </div>
            )
          : (
            <div className="mx-auto container  flex justify-center w-full  items-center ">
              <SpinnerLoader />
            </div>
            )
          }
        </section>

      </div>

  );
};

export default JobProfile;
